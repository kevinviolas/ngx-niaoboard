import { Component, EventEmitter, Input, Output } from '@angular/core';
import { debounceTime } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../translate.service";
import * as i3 from "../konverso.service";
import * as i4 from "@angular/common";
export class CustomCheckboxCalendarComponent {
    constructor(_formBuilder, 
    //public animations : AnimationsService,
    translate, service) {
        this._formBuilder = _formBuilder;
        this.translate = translate;
        this.service = service;
        this.calendarTemplate = {
            morning: { monday: false, tuhesday: false }
        };
        this.columnOverride = {};
        this.calendarChange = new EventEmitter(true);
        this.state = true;
        this.form = {};
        this.column = [];
        this.rows = [''];
        this.checked = {};
        this.calendar_value = {};
    }
    ngOnInit() {
        const formGroup = {};
        for (const part in this.calendarTemplate) {
            if (!formGroup[part]) {
                formGroup[part] = {}; // morning
            }
            this.rows.push(part);
            for (const day in this.calendarTemplate[part]) {
                // @ts-ignore
                formGroup[part][day] = [this.calendarTemplate[part][day]]; //morgin/monday
                this.column.push(day);
            }
            this.column = [...new Set(this.column)];
        }
        for (const part in formGroup) {
            this.form[part] = this._formBuilder.group(formGroup[part]);
            this.observer(part);
            this.process(this.form[part].value, part);
        }
    }
    observer(part) {
        this.form[part].valueChanges.pipe(debounceTime(200)).subscribe(changes => this.process(changes, part));
    }
    process(changes, part) {
        if (changes.all !== this.checked[part]) {
            const keys = Object.keys(this.form[part].controls);
            for (const k of keys) {
                this.form[part].controls[k].patchValue(changes.all, { emitEvent: false, onlySelf: true });
                if (!this.calendar_value[k])
                    this.calendar_value[k] = {};
                if (!this.calendar_value[k][part])
                    this.calendar_value[k][part] = changes.all;
                else
                    this.calendar_value[k][part] = changes.all;
                this.calendar_value[k][part] = changes.all;
            }
            this.checked[part] = changes.all;
        }
        else {
            const keys = Object.keys(changes).filter((e) => e !== 'all');
            let counter = keys.length;
            for (const k of keys) {
                if (!this.calendar_value[k])
                    this.calendar_value[k] = {};
                if (!this.calendar_value[k][part])
                    this.calendar_value[k][part] = changes[k];
                else
                    this.calendar_value[k][part] = changes[k];
                if (!changes[k]) {
                    counter--;
                }
            }
            if (counter === keys.length) {
                this.form[part].controls['all'].patchValue(true, { emitEvent: false, onlySelf: true });
                this.checked[part] = true;
            }
            else {
                this.checked[part] = false;
                this.form[part].controls['all'].patchValue(false, { emitEvent: false, onlySelf: true });
            }
        }
        this.calendarChange.emit(this.calendar_value);
    }
}
CustomCheckboxCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: CustomCheckboxCalendarComponent, deps: [{ token: i1.FormBuilder }, { token: i2.TranslateService }, { token: i3.KonversoService }], target: i0.ɵɵFactoryTarget.Component });
CustomCheckboxCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.0", type: CustomCheckboxCalendarComponent, selector: "custom-checkbox-calendar", inputs: { calendarTemplate: "calendarTemplate", columnOverride: "columnOverride", state: "state" }, outputs: { calendarChange: "calendarChange" }, ngImport: i0, template: "<div class=\"checkbox-calendar\">\r\n    <div class=\"column-title\">\r\n      <div *ngFor=\"let row of rows\" class=\"calendar-row\">\r\n        {{  (columnOverride[row] ? translate.translate(service.locale, columnOverride[row]) : translate.translate(service.locale,row))}}\r\n      </div>\r\n    </div>\r\n    <div class=\"column-value\">\r\n      <div class=\"calendar-row-wrapper\">\r\n        <ng-container *ngFor=\"let c of column\">\r\n          <div class=\"calendar-head\"\r\n               [style]=\"{width : 'calc(100% / '+column.length+')'}\">\r\n               {{ columnOverride[c] ? translate.translate(service.locale, columnOverride[c]) : (c === 'all' ? '' : translate.translate(service.locale , c) )}} \r\n            </div>\r\n        </ng-container>\r\n      </div>\r\n  \r\n      <ng-container *ngFor=\"let row of rows;\">\r\n        <ng-container *ngIf=\"row !== ''\">\r\n          <form [formGroup]=\"form[row]\" class=\"calendar-row-wrapper\">\r\n            <ng-container *ngFor=\"let c of column\">\r\n  \r\n              <div class=\"calendar-checkbox\" [style]=\"{width : 'calc(100% / '+column.length+')'}\">\r\n                <input type=\"checkbox\" [name]=\"row + '_' + c\" [formControlName]=\"c\">\r\n                <label class=\"bot-checkbox-label\" [for]=\"row + '_' + c\"></label>\r\n              </div>\r\n  \r\n            </ng-container>\r\n          </form>\r\n        </ng-container>\r\n  \r\n      </ng-container>\r\n    </div>\r\n  \r\n  </div>\r\n  ", styles: [".checkbox-calendar{display:flex}.checkbox-calendar .column-value{display:inline-flex;flex-direction:column;width:100%}.checkbox-calendar .column-value .calendar-row-wrapper{display:flex;width:100%}.checkbox-calendar .column-title{display:inline-flex;flex-direction:column;min-height:50px;width:30%}.calendar-checkbox input[type=checkbox]{width:24px;height:24px}.calendar-head,.calendar-row,.calendar-checkbox{margin-top:10px;min-height:44px;padding:10px;text-align:center;font-size:.875rem;margin-right:0!important}\n"], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: CustomCheckboxCalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'custom-checkbox-calendar', template: "<div class=\"checkbox-calendar\">\r\n    <div class=\"column-title\">\r\n      <div *ngFor=\"let row of rows\" class=\"calendar-row\">\r\n        {{  (columnOverride[row] ? translate.translate(service.locale, columnOverride[row]) : translate.translate(service.locale,row))}}\r\n      </div>\r\n    </div>\r\n    <div class=\"column-value\">\r\n      <div class=\"calendar-row-wrapper\">\r\n        <ng-container *ngFor=\"let c of column\">\r\n          <div class=\"calendar-head\"\r\n               [style]=\"{width : 'calc(100% / '+column.length+')'}\">\r\n               {{ columnOverride[c] ? translate.translate(service.locale, columnOverride[c]) : (c === 'all' ? '' : translate.translate(service.locale , c) )}} \r\n            </div>\r\n        </ng-container>\r\n      </div>\r\n  \r\n      <ng-container *ngFor=\"let row of rows;\">\r\n        <ng-container *ngIf=\"row !== ''\">\r\n          <form [formGroup]=\"form[row]\" class=\"calendar-row-wrapper\">\r\n            <ng-container *ngFor=\"let c of column\">\r\n  \r\n              <div class=\"calendar-checkbox\" [style]=\"{width : 'calc(100% / '+column.length+')'}\">\r\n                <input type=\"checkbox\" [name]=\"row + '_' + c\" [formControlName]=\"c\">\r\n                <label class=\"bot-checkbox-label\" [for]=\"row + '_' + c\"></label>\r\n              </div>\r\n  \r\n            </ng-container>\r\n          </form>\r\n        </ng-container>\r\n  \r\n      </ng-container>\r\n    </div>\r\n  \r\n  </div>\r\n  ", styles: [".checkbox-calendar{display:flex}.checkbox-calendar .column-value{display:inline-flex;flex-direction:column;width:100%}.checkbox-calendar .column-value .calendar-row-wrapper{display:flex;width:100%}.checkbox-calendar .column-title{display:inline-flex;flex-direction:column;min-height:50px;width:30%}.calendar-checkbox input[type=checkbox]{width:24px;height:24px}.calendar-head,.calendar-row,.calendar-checkbox{margin-top:10px;min-height:44px;padding:10px;text-align:center;font-size:.875rem;margin-right:0!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.TranslateService }, { type: i3.KonversoService }]; }, propDecorators: { calendarTemplate: [{
                type: Input
            }], columnOverride: [{
                type: Input
            }], calendarChange: [{
                type: Output
            }], state: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWNoZWNrYm94LWNhbGVuZGFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tvbnZlcnNvL3NyYy9saWIvY3VzdG9tLWNoZWNrYm94LWNhbGVuZGFyL2N1c3RvbS1jaGVja2JveC1jYWxlbmRhci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9rb252ZXJzby9zcmMvbGliL2N1c3RvbS1jaGVja2JveC1jYWxlbmRhci9jdXN0b20tY2hlY2tib3gtY2FsZW5kYXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUU3RSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sTUFBTSxDQUFDOzs7Ozs7QUFhbEMsTUFBTSxPQUFPLCtCQUErQjtJQWUxQyxZQUNVLFlBQXlCO0lBQ2pDLHdDQUF3QztJQUNqQyxTQUEyQixFQUMzQixPQUF3QjtRQUh2QixpQkFBWSxHQUFaLFlBQVksQ0FBYTtRQUUxQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQWpCeEIscUJBQWdCLEdBQXNCO1lBQzdDLE9BQU8sRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBQztTQUMxQyxDQUFBO1FBQ1EsbUJBQWMsR0FBOEIsRUFBRSxDQUFDO1FBQzlDLG1CQUFjLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsVUFBSyxHQUFZLElBQUksQ0FBQztRQUV4QixTQUFJLEdBQWlDLEVBQUUsQ0FBQztRQUN4QyxXQUFNLEdBQWEsRUFBRSxDQUFDO1FBQ3RCLFNBQUksR0FBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JCLFlBQU8sR0FBK0IsRUFB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LEVBQUMsQ0FBQyxDQUFDO2dCQUNyRixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQzthQUMzQjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7YUFDdkY7U0FDRjtRQUNELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUMvQyxDQUFDOzs0SEFqRlUsK0JBQStCO2dIQUEvQiwrQkFBK0IsbU5DZjVDLHc5Q0FrQ0U7MkZEbkJXLCtCQUErQjtrQkFOM0MsU0FBUzsrQkFDRSwwQkFBMEI7K0pBTzNCLGdCQUFnQjtzQkFBeEIsS0FBSztnQkFHRyxjQUFjO3NCQUF0QixLQUFLO2dCQUNJLGNBQWM7c0JBQXZCLE1BQU07Z0JBQ0UsS0FBSztzQkFBYixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtGb3JtQnVpbGRlciwgRm9ybUdyb3VwfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuaW1wb3J0IHtkZWJvdW5jZVRpbWV9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IEtvbnZlcnNvU2VydmljZSB9IGZyb20gJy4uL2tvbnZlcnNvLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vdHJhbnNsYXRlLnNlcnZpY2UnO1xyXG4vL2ltcG9ydCB7QW5pbWF0aW9uc1NlcnZpY2UsIEZhZGVTbGlkZUluT3V0fSBmcm9tIFwiQGNvcmUvYW5pbWF0aW9uc1wiO1xyXG5cclxudHlwZSBJQ2FsZW5kYXJUZW1wbGF0ZSA9IHsgW2tleTogc3RyaW5nXTogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0gfTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnY3VzdG9tLWNoZWNrYm94LWNhbGVuZGFyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vY3VzdG9tLWNoZWNrYm94LWNhbGVuZGFyLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9jdXN0b20tY2hlY2tib3gtY2FsZW5kYXIuY29tcG9uZW50LnNjc3MnXSxcclxuICAvL2FuaW1hdGlvbnMgOiBbRmFkZVNsaWRlSW5PdXRdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21DaGVja2JveENhbGVuZGFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgQElucHV0KCkgY2FsZW5kYXJUZW1wbGF0ZTogSUNhbGVuZGFyVGVtcGxhdGUgPSB7XHJcbiAgICBtb3JuaW5nOiB7bW9uZGF5OiBmYWxzZSwgdHVoZXNkYXk6IGZhbHNlfVxyXG4gIH1cclxuICBASW5wdXQoKSBjb2x1bW5PdmVycmlkZTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xyXG4gIEBPdXRwdXQoKSBjYWxlbmRhckNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIodHJ1ZSk7XHJcbiAgQElucHV0KCkgc3RhdGUgOmJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICBwdWJsaWMgZm9ybTogeyBba2V5OiBzdHJpbmddOiBGb3JtR3JvdXAgfSA9IHt9O1xyXG4gIHB1YmxpYyBjb2x1bW46IHN0cmluZ1tdID0gW107XHJcbiAgcHVibGljIHJvd3M6IHN0cmluZ1tdID0gWycnXTtcclxuICBwcml2YXRlIGNoZWNrZWQ6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9ID0ge307XHJcbiAgcHJpdmF0ZSBjYWxlbmRhcl92YWx1ZTogYW55ID0ge31cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIF9mb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIsIFxyXG4gICAgLy9wdWJsaWMgYW5pbWF0aW9ucyA6IEFuaW1hdGlvbnNTZXJ2aWNlLFxyXG4gICAgcHVibGljIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSwgXHJcbiAgICBwdWJsaWMgc2VydmljZTogS29udmVyc29TZXJ2aWNlLFxyXG4gICkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICBjb25zdCBmb3JtR3JvdXA6IElDYWxlbmRhclRlbXBsYXRlID0ge307XHJcbiAgICBmb3IgKGNvbnN0IHBhcnQgaW4gdGhpcy5jYWxlbmRhclRlbXBsYXRlKSB7XHJcbiAgICAgIGlmICghZm9ybUdyb3VwW3BhcnRdKSB7XHJcbiAgICAgICAgZm9ybUdyb3VwW3BhcnRdID0ge307Ly8gbW9ybmluZ1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucm93cy5wdXNoKHBhcnQpO1xyXG4gICAgICBmb3IgKGNvbnN0IGRheSBpbiB0aGlzLmNhbGVuZGFyVGVtcGxhdGVbcGFydF0pIHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZm9ybUdyb3VwW3BhcnRdW2RheV0gPSBbdGhpcy5jYWxlbmRhclRlbXBsYXRlW3BhcnRdW2RheV1dIC8vbW9yZ2luL21vbmRheVxyXG4gICAgICAgIHRoaXMuY29sdW1uLnB1c2goZGF5KTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmNvbHVtbiA9IFsuLi5uZXcgU2V0KHRoaXMuY29sdW1uKV07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCBwYXJ0IGluIGZvcm1Hcm91cCkge1xyXG4gICAgICB0aGlzLmZvcm1bcGFydF0gPSB0aGlzLl9mb3JtQnVpbGRlci5ncm91cChmb3JtR3JvdXBbcGFydF0pO1xyXG4gICAgICB0aGlzLm9ic2VydmVyKHBhcnQpO1xyXG4gICAgICB0aGlzLnByb2Nlc3ModGhpcy5mb3JtW3BhcnRdLnZhbHVlLCBwYXJ0KTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9ic2VydmVyKHBhcnQ6IHN0cmluZykge1xyXG4gICAgdGhpcy5mb3JtW3BhcnRdLnZhbHVlQ2hhbmdlcy5waXBlKGRlYm91bmNlVGltZSgyMDApKS5zdWJzY3JpYmUoY2hhbmdlcyA9PiB0aGlzLnByb2Nlc3MoY2hhbmdlcywgcGFydCkpXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByb2Nlc3MoY2hhbmdlczogYW55LCBwYXJ0OiBzdHJpbmcpIHtcclxuICAgIGlmIChjaGFuZ2VzLmFsbCAhPT0gdGhpcy5jaGVja2VkW3BhcnRdKSB7XHJcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmZvcm1bcGFydF0uY29udHJvbHMpO1xyXG4gICAgICBmb3IgKGNvbnN0IGsgb2Yga2V5cykge1xyXG4gICAgICAgIHRoaXMuZm9ybVtwYXJ0XS5jb250cm9sc1trXS5wYXRjaFZhbHVlKGNoYW5nZXMuYWxsLCB7ZW1pdEV2ZW50OiBmYWxzZSwgb25seVNlbGY6IHRydWV9KTtcclxuICAgICAgICBpZiAoIXRoaXMuY2FsZW5kYXJfdmFsdWVba10pIHRoaXMuY2FsZW5kYXJfdmFsdWVba10gPSB7fVxyXG4gICAgICAgIGlmICghdGhpcy5jYWxlbmRhcl92YWx1ZVtrXVtwYXJ0XSkgdGhpcy5jYWxlbmRhcl92YWx1ZVtrXVtwYXJ0XSA9IGNoYW5nZXMuYWxsO1xyXG4gICAgICAgIGVsc2UgdGhpcy5jYWxlbmRhcl92YWx1ZVtrXVtwYXJ0XSA9IGNoYW5nZXMuYWxsO1xyXG4gICAgICAgIHRoaXMuY2FsZW5kYXJfdmFsdWVba11bcGFydF0gPSBjaGFuZ2VzLmFsbDtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmNoZWNrZWRbcGFydF0gPSBjaGFuZ2VzLmFsbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjaGFuZ2VzKS5maWx0ZXIoKGU6IHN0cmluZykgPT4gZSAhPT0gJ2FsbCcpO1xyXG4gICAgICBsZXQgY291bnRlciA9IGtleXMubGVuZ3RoO1xyXG4gICAgICBmb3IgKGNvbnN0IGsgb2Yga2V5cykge1xyXG4gICAgICAgIGlmICghdGhpcy5jYWxlbmRhcl92YWx1ZVtrXSkgdGhpcy5jYWxlbmRhcl92YWx1ZVtrXSA9IHt9XHJcbiAgICAgICAgaWYgKCF0aGlzLmNhbGVuZGFyX3ZhbHVlW2tdW3BhcnRdKSB0aGlzLmNhbGVuZGFyX3ZhbHVlW2tdW3BhcnRdID0gY2hhbmdlc1trXTtcclxuICAgICAgICBlbHNlIHRoaXMuY2FsZW5kYXJfdmFsdWVba11bcGFydF0gPSBjaGFuZ2VzW2tdXHJcbiAgICAgICAgaWYgKCFjaGFuZ2VzW2tdKSB7XHJcbiAgICAgICAgICBjb3VudGVyLS07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChjb3VudGVyID09PSBrZXlzLmxlbmd0aCkge1xyXG4gICAgICAgIHRoaXMuZm9ybVtwYXJ0XS5jb250cm9sc1snYWxsJ10ucGF0Y2hWYWx1ZSh0cnVlLCB7ZW1pdEV2ZW50OiBmYWxzZSwgb25seVNlbGY6IHRydWV9KTtcclxuICAgICAgICB0aGlzLmNoZWNrZWRbcGFydF0gPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuY2hlY2tlZFtwYXJ0XSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZm9ybVtwYXJ0XS5jb250cm9sc1snYWxsJ10ucGF0Y2hWYWx1ZShmYWxzZSwge2VtaXRFdmVudDogZmFsc2UsIG9ubHlTZWxmOiB0cnVlfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuY2FsZW5kYXJDaGFuZ2UuZW1pdCh0aGlzLmNhbGVuZGFyX3ZhbHVlKVxyXG4gIH1cclxuXHJcbn1cclxuIiwiPGRpdiBjbGFzcz1cImNoZWNrYm94LWNhbGVuZGFyXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29sdW1uLXRpdGxlXCI+XHJcbiAgICAgIDxkaXYgKm5nRm9yPVwibGV0IHJvdyBvZiByb3dzXCIgY2xhc3M9XCJjYWxlbmRhci1yb3dcIj5cclxuICAgICAgICB7eyAgKGNvbHVtbk92ZXJyaWRlW3Jvd10gPyB0cmFuc2xhdGUudHJhbnNsYXRlKHNlcnZpY2UubG9jYWxlLCBjb2x1bW5PdmVycmlkZVtyb3ddKSA6IHRyYW5zbGF0ZS50cmFuc2xhdGUoc2VydmljZS5sb2NhbGUscm93KSl9fVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbHVtbi12YWx1ZVwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY2FsZW5kYXItcm93LXdyYXBwZXJcIj5cclxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBjIG9mIGNvbHVtblwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNhbGVuZGFyLWhlYWRcIlxyXG4gICAgICAgICAgICAgICBbc3R5bGVdPVwie3dpZHRoIDogJ2NhbGMoMTAwJSAvICcrY29sdW1uLmxlbmd0aCsnKSd9XCI+XHJcbiAgICAgICAgICAgICAgIHt7IGNvbHVtbk92ZXJyaWRlW2NdID8gdHJhbnNsYXRlLnRyYW5zbGF0ZShzZXJ2aWNlLmxvY2FsZSwgY29sdW1uT3ZlcnJpZGVbY10pIDogKGMgPT09ICdhbGwnID8gJycgOiB0cmFuc2xhdGUudHJhbnNsYXRlKHNlcnZpY2UubG9jYWxlICwgYykgKX19IFxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgPC9kaXY+XHJcbiAgXHJcbiAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IHJvdyBvZiByb3dzO1wiPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJyb3cgIT09ICcnXCI+XHJcbiAgICAgICAgICA8Zm9ybSBbZm9ybUdyb3VwXT1cImZvcm1bcm93XVwiIGNsYXNzPVwiY2FsZW5kYXItcm93LXdyYXBwZXJcIj5cclxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgYyBvZiBjb2x1bW5cIj5cclxuICBcclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FsZW5kYXItY2hlY2tib3hcIiBbc3R5bGVdPVwie3dpZHRoIDogJ2NhbGMoMTAwJSAvICcrY29sdW1uLmxlbmd0aCsnKSd9XCI+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgW25hbWVdPVwicm93ICsgJ18nICsgY1wiIFtmb3JtQ29udHJvbE5hbWVdPVwiY1wiPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYm90LWNoZWNrYm94LWxhYmVsXCIgW2Zvcl09XCJyb3cgKyAnXycgKyBjXCI+PC9sYWJlbD5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICBcclxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgXHJcbiAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgPC9kaXY+XHJcbiAgXHJcbiAgPC9kaXY+XHJcbiAgIl19